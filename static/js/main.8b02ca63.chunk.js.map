{"version":3,"sources":["actions/index.js","reducers/index.js","components/Picker.js","components/Posts.js","containers/App.js","index.js"],"names":["selectSubreddit","subreddit","type","invalidateSubreddit","fetchPosts","dispatch","requestPosts","fetch","concat","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","defineProperty","items","lastUpdated","selectedSubreddit","Picker","_ref","value","onChange","options","react_default","a","createElement","e","target","option","key","Posts","post","i","rel","href","permalink","title","App","handleChange","nextSubreddit","_this","props","handleRefreshClick","preventDefault","_this$props","_this$props2","this","prevProps","_this$props3","_this$props4","isEmpty","components_Picker","toLocaleTimeString","onClick","style","opacity","components_Posts","Component","connect","middleware","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","apply","render","es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.8b02ca63.chunk.js","sourcesContent":["export const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport const selectSubreddit = subreddit => ({\n  type: SELECT_SUBREDDIT,\n  subreddit\n})\n\nexport const invalidateSubreddit = subreddit => ({\n  type: INVALIDATE_SUBREDDIT,\n  subreddit\n})\n\nexport const requestPosts = subreddit => ({\n  type: REQUEST_POSTS,\n  subreddit\n})\n\nexport const receivePosts = (subreddit, json) => ({\n  type: RECEIVE_POSTS,\n  subreddit,\n  posts: json.data.children.map(child => child.data),\n  receivedAt: Date.now()\n})\n\nconst fetchPosts = subreddit => dispatch => {\n  dispatch(requestPosts(subreddit))\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then(response => response.json())\n    .then(json => dispatch(receivePosts(subreddit, json)))\n}\n\nconst shouldFetchPosts = (state, subreddit) => {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  }\n  if (posts.isFetching) {\n    return false\n  }\n  return posts.didInvalidate\n}\n\nexport const fetchPostsIfNeeded = subreddit => (dispatch, getState) => {\n  if (shouldFetchPosts(getState(), subreddit)) {\n    return dispatch(fetchPosts(subreddit))\n  }\n}\n","import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT, INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS, RECEIVE_POSTS\n} from '../actions'\n\nconst selectedSubreddit = (state = 'reactjs', action) => {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nconst posts = (state = {\n  isFetching: false,\n  didInvalidate: false,\n  items: []\n}, action) => {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return {\n        ...state,\n        didInvalidate: true\n      }\n    case REQUEST_POSTS:\n      return {\n        ...state,\n        isFetching: true,\n        didInvalidate: false\n      }\n    case RECEIVE_POSTS:\n      return {\n        ...state,\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      }\n    default:\n      return state\n  }\n}\n\nconst postsBySubreddit = (state = { }, action) => {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return {\n        ...state,\n        [action.subreddit]: posts(state[action.subreddit], action)\n      }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsBySubreddit,\n  selectedSubreddit\n})\n\nexport default rootReducer\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Picker = ({ value, onChange, options }) => (\n  <span>\n    <h1>{value}</h1>\n    <select onChange={e => onChange(e.target.value)}\n            value={value}>\n      {options.map(option =>\n        <option value={option} key={option}>\n          {option}\n        </option>)\n      }\n    </select>\n  </span>\n)\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.string.isRequired\n  ).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}\n\nexport default Picker\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Posts = ({posts}) => (\n  <ul>\n    {posts.map((post, i) =>\n      <li key={i}>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.reddit.com${post.permalink}`}>{post.title}</a>\n      </li>\n    )}\n  </ul>\n)\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}\n\nexport default Posts\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { selectSubreddit, fetchPostsIfNeeded, invalidateSubreddit } from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass App extends Component {\n  static propTypes = {\n    selectedSubreddit: PropTypes.string.isRequired,\n    posts: PropTypes.array.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    lastUpdated: PropTypes.number,\n    dispatch: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange = nextSubreddit => {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n  }\n\n  handleRefreshClick = e => {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    const isEmpty = posts.length === 0\n    return (\n      <div>\n        <Picker value={selectedSubreddit}\n                onChange={this.handleChange}\n                options={[ 'reactjs', 'frontend' ]} />\n        <p>\n          {lastUpdated &&\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.\n              {' '}\n            </span>\n          }\n          {!isFetching &&\n            <button onClick={this.handleRefreshClick}>\n              Refresh\n            </button>\n          }\n        </p>\n        {isEmpty\n          ? (isFetching ? <h2>Loading...</h2> : <h2>Empty.</h2>)\n          : <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n              <Posts posts={posts} />\n            </div>\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const {\n    isFetching,\n    lastUpdated,\n    items: posts\n  } = postsBySubreddit[selectedSubreddit] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport reducer from './reducers'\nimport App from './containers/App'\n\nconst middleware = [ thunk ]\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(createLogger())\n}\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}